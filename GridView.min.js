$.widget("DragonCoding.GridView", {
    options: { jsonUrl: "", dataClass: "", replacementHeaders: [], cssClass: "", caption: "", headerWordDelimiter: "caps", dark: !1, light: !1, striped: !0, hover: !0, bordered: !1, responsiveAlways: !0, responsiveSm: !1, responsiveMd: !1, responsiveLg: !1, responsiveXl: !1 }, _create: function () {
    this.container = this.element; this.container.addClass("DC-GridView"); this.cols = []; this.headers = []; this.mainTable = $("<table>", {}).appendTo(this.container); this._setCaption(); this.head = $("<thead>", {}).appendTo(this.mainTable);
        this.body = $("<tbody>", {}).appendTo(this.mainTable); this.footer = $("<tfoot>", {}).appendTo(this.mainTable); this._setTableStyles(); this._analyzeData(); this._refresh()
    }, _refresh: function () { var a = this; $.getJSON(a.options.jsonUrl, function (b) { if ("" === a.options.dataClass) a._drawBody(b); else { var c = []; $.each(b, function (b, e) { var d = new a.options.dataClass(e); c.push(d) }); a._drawBody(c) } }) }, changeTable: function (a, b, c) {
        this.options.jsonUrl = a; b != this.options.replacementHeaders && (this.options.replacementHeaders = b);
        this.options.dataClass != c && (this.options.dataClass = c); this._analyzeData()
    }, _destroy: function () { this.container.removeClass("DC-GridView") }, _setOptions: function () { this._superApply(arguments); this._refresh() }, _setOption: function (a, b) { this._super(a, b) }, _setTableStyles: function () {
    !1 === ("" === this.options.cssClass ? !1 : !0) ? ($(this.mainTable).addClass("table"), !0 === this.options.dark && $(this.mainTable).addClass("table-dark"), !0 === this.options.light && $(this.mainTable).addClass("table-light"), !0 === this.options.striped &&
        $(this.mainTable).addClass("table-striped"), !0 === this.options.hover && $(this.mainTable).addClass("table-hover"), !0 === this.options.bordered ? $(this.mainTable).addClass("table-bordered") : $(this.mainTable).addClass("table-borderless"), !0 === this.options.responsiveAlways && $(this.mainTable).addClass("table-responsive"), !0 === this.options.responsiveSm && $(this.mainTable).addClass("table-responsive-sm"), !0 === this.options.responsiveMd && $(this.mainTable).addClass("table-responsive-md"), !0 === this.options.responsiveLg &&
        $(this.mainTable).addClass("table-responsive-lg"), !0 === this.options.responsiveXl && $(this.mainTable).addClass("table-responsive-xl")) : $(this.mainTable).addClass(this.options.customTableClass)
    }, _setCaption: function () { !0 === ("" === this.options.caption ? !1 : !0) && $("<caption>").text(this.options.caption).appendTo(this.mainTable) }, _drawHeader: function () {
        $(this.head).html(""); this.headers = 0 < this.options.replacementHeaders.length ? this.options.replacementHeaders : this.cols; var a = $("<tr>", {}).appendTo(this.head),
            b = this._parseHeaders(this.headers); $.each(b, function (b, d) { $("<th>", { scope: "col" }).text(d).appendTo(a) })
    }, _drawFooter: function () { $(this.footer).html(""); $("<tr>", {}).appendTo(this.footer) }, _drawBody: function (a) { var b = this; $(b.body).html(""); $.each(a, function (a, d) { var c = $("<tr>", {}).appendTo(b.body); $.each(b.cols, function (a, b) { $("<td>", {}).text(d[b]).appendTo(c) }) }) }, _analyzeData: function () {
        var a = this; if ("" != a.options.dataClass) {
            var b = new a.options.dataClass; a.cols = Object.keys(b); a._drawHeader(); a._drawFooter();
            a._refresh()
        } else $.getJSON(a.options.jsonUrl, function (b) { a.cols = Object.keys(b[0]); a._drawHeader(); a._drawFooter(); a._refresh() }).fail(function (a, b, e) { alert(a) })
    }, _parseHeaders: function (a) { var b = this, c = []; if ("" != b.options.headerWordDelimiter) switch (b.options.headerWordDelimiter) { case "caps": $.each(a, function (a, b) { c.push(b.match(/([A-Z][^A-Z]*)/g).join(" ")) }); break; default: $.each(a, function (a, e) { c.push(e.split(b.options.headerWordDelimiter).join(" ")) }) } else c = a; return c }
});